# .github/workflows/analyze.yml
name: Analyze Cal.com Dependencies

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Cal.com branch to analyze"
        required: true
        default: "main"
      force_refresh:
        description: "Force refresh (ignore cache)"
        required: false
        default: "false"
        type: boolean
      max_files:
        description: "Maximum number of files to analyze (0 for all)"
        required: false
        default: "5000"
        type: number

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout analyzer repo
        uses: actions/checkout@v3

      - name: Fetch existing GitHub Pages content
        run: |
          # Create a temporary directory for the gh-pages branch
          mkdir -p temp_gh_pages

          # Try to fetch the existing gh-pages branch content
          if git fetch origin gh-pages; then
            git worktree add temp_gh_pages gh-pages
            
            # If results directory exists, copy it to the workspace
            if [ -d "temp_gh_pages/results" ]; then
              echo "Copying existing results directory..."
              mkdir -p results
              cp -r temp_gh_pages/results/* results/
            fi
            
            # Clean up
            git worktree remove temp_gh_pages
          else
            echo "No existing gh-pages branch found. Starting fresh."
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Debug information
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Repository Owner: $GITHUB_REPOSITORY_OWNER"
          echo "Branch to analyze: ${{ github.event.inputs.branch }}"
          BRANCH_SLUG=$(echo "${{ github.event.inputs.branch }}" | sed 's/\//-/g' | sed 's/[^a-zA-Z0-9\-]/-/g')
          echo "Branch slug: $BRANCH_SLUG"
          echo "Expected results path: results/${BRANCH_SLUG}/index.html"
          echo "GitHub Pages URL: https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/results/${BRANCH_SLUG}/"

      - name: Check cache
        id: check-cache
        if: ${{ github.event.inputs.force_refresh != 'true' }}
        run: |
          # Improved branch slugification
          BRANCH_SLUG=$(echo "${{ github.event.inputs.branch }}" | sed 's/\//-/g' | sed 's/[^a-zA-Z0-9\-]/-/g')
          if [ -f "results/${BRANCH_SLUG}/index.html" ]; then
            echo "cache_hit=true" >> $GITHUB_OUTPUT
          else
            echo "cache_hit=false" >> $GITHUB_OUTPUT
          fi
          echo "branch_slug=${BRANCH_SLUG}" >> $GITHUB_OUTPUT

      - name: Clone Cal.com repository
        if: ${{ steps.check-cache.outputs.cache_hit != 'true' }}
        run: |
          git clone --depth 1 --branch ${{ github.event.inputs.branch }} https://github.com/calcom/cal.com.git cal-repo

      - name: Run custom dependency analysis
        if: ${{ steps.check-cache.outputs.cache_hit != 'true' }}
        run: |
          node src/analyze-dependencies.js cal-repo cal-repo/raw.out ${{ github.event.inputs.max_files }}

      - name: Parse results and generate HTML
        if: ${{ steps.check-cache.outputs.cache_hit != 'true' }}
        run: |
          # Improved branch slugification
          BRANCH_SLUG=$(echo "${{ github.event.inputs.branch }}" | sed 's/\//-/g' | sed 's/[^a-zA-Z0-9\-]/-/g')
          mkdir -p results/${BRANCH_SLUG}
          node src/parse-results.js cal-repo/raw.out ${{ github.event.inputs.branch }} results/${BRANCH_SLUG}/index.html

      - name: Create metadata file
        run: |
          BRANCH_SLUG="${{ steps.check-cache.outputs.branch_slug }}"
          if [ -z "$BRANCH_SLUG" ]; then
            # Improved branch slugification
            BRANCH_SLUG=$(echo "${{ github.event.inputs.branch }}" | sed 's/\//-/g' | sed 's/[^a-zA-Z0-9\-]/-/g')
          fi

          echo "{
            \"branch\": \"${{ github.event.inputs.branch }}\",
            \"analyzed_at\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
            \"workflow_run\": \"${{ github.run_id }}\"
          }" > results/${BRANCH_SLUG}/metadata.json

      - name: Update index of analyses
        run: |
          node src/update-index.js

      - name: List files before deployment
        run: |
          echo "Files in results directory:"
          find results -type f | sort

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: results
          target-folder: results
          clean: false

      - name: Get repository name
        id: repo-name
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          echo "name=$REPO_NAME" >> $GITHUB_OUTPUT

      - name: Log results URL
        run: |
          BRANCH_SLUG="${{ steps.check-cache.outputs.branch_slug }}"
          if [ -z "$BRANCH_SLUG" ]; then
            # Improved branch slugification
            BRANCH_SLUG=$(echo "${{ github.event.inputs.branch }}" | sed 's/\//-/g' | sed 's/[^a-zA-Z0-9\-]/-/g')
          fi

          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
          REPO_NAME="${{ steps.repo-name.outputs.name }}"

          echo "============================================================="
          echo "âœ… Analysis complete!"
          echo "ðŸ“Š Results are available at:"
          echo "https://${REPO_OWNER}.github.io/${REPO_NAME}/results/${BRANCH_SLUG}/"
          echo "============================================================="

          # Also add to GitHub step summary
          echo "## Circular Dependency Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "Analysis of branch **${{ github.event.inputs.branch }}** is now available." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”— [View Results](https://${REPO_OWNER}.github.io/${REPO_NAME}/results/${BRANCH_SLUG}/)" >> $GITHUB_STEP_SUMMARY

      - name: Verify deployment
        run: |
          BRANCH_SLUG=$(echo "${{ github.event.inputs.branch }}" | sed 's/\//-/g' | sed 's/[^a-zA-Z0-9\-]/-/g')
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"

          echo "Waiting for GitHub Pages deployment to complete..."
          sleep 30  # Give GitHub Pages some time to deploy

          echo "Deployment should be available at:"
          echo "https://${REPO_OWNER}.github.io/${REPO_NAME}/results/${BRANCH_SLUG}/"

      - name: List files after deployment
        run: |
          echo "Files in results directory after deployment:"
          find results -type f | sort
